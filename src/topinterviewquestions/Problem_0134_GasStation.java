package topinterviewquestions;
//圆圈路
import java.util.LinkedList;
//在一条环路上有 n个加油站，其中第 i个加油站有汽油gas[i]升。
//你有一辆油箱容量无限的的汽车，从第 i 个加油站开往第 i+1个加油站需要消耗汽油cost[i]升。你从其中的一个加油站出发，开始时油箱为空。
//给定两个整数数组 gas 和 cost ，如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1 。如果存在解，则 保证 它是 唯一 的。

//示1:
//输入: gas = [1,2,3,4,5], cost = [3,4,5,1,2]
//输出: 3
//解释:
//从 3 号加油站(索引为 3 处)出发，可获得 4 升汽油。此时油箱有 = 0 + 4 = 4 升汽油
//开往 4 号加油站，此时油箱有 4 - 1 + 5 = 8 升汽油
//开往 0 号加油站，此时油箱有 8 - 2 + 1 = 7 升汽油
//开往 1 号加油站，此时油箱有 7 - 3 + 2 = 6 升汽油
//开往 2 号加油站，此时油箱有 6 - 4 + 3 = 5 升汽油
//开往 3 号加油站，你需要消耗 5 升汽油，正好足够你返回到 3 号加油站。
//因此，3 可为起始索引。
//链接：https://leetcode.cn/problems/gas-station
public class Problem_0134_GasStation {

	//思路：首先判断总油量是否小于总油耗，如果是则肯定不能走一圈。如果否，那肯定能跑一圈。
	// 接下来就是循环数组，从第一个站开始，计算每一站剩余的油量，
	// 如果油量为负了，就以这个站为起点从新计算。如果到达某一个点为负，
	// 说明起点到这个点中间的所有站点都不能到达该点。

	//小段一部分功能，直观理解，可以这样想：
	// 假设从x加油站出发经过z加油站最远能到达y加油站，那么从z加油站直接出发，不可能到达y下一个加油站。
	// 因为从x出发到z加油站时肯定还有存储的油，这都到不了y的下一站，
	// 而直接从z出发刚开始是没有存储的油的，所以更不可能到达y的下一站。
	public int canCompleteCircuit(int[] gas, int[] cost) {
		int n = gas.length;
		int sum = 0;

		//------整圈肯定走不了
		for(int i = 0;i < n;i++){
			sum += gas[i] - cost[i];
		}

		if(sum < 0){
			return -1;
		}
		//------整圈肯定走不了

		int currentGas = 0;
		int start = 0;

		for(int i = 0;i < n;i++){
			currentGas += gas[i] - cost[i];
			if(currentGas < 0){
				currentGas = 0;
				start = i + 1;//直观理解，可以这样想：
				// 假设从x加油站出发经过z加油站最远能到达y加油站，那么从z加油站直接出发，不可能到达y下一个加油站。
				// 因为从x出发到z加油站时肯定还有存储的油，这都到不了y的下一站，
				// 而直接从z出发刚开始是没有存储的油的，所以更不可能到达y的下一站。

			}
		}
		return start;
	}
}




